#最終更新:20230130 21:50
setwd("/Users/Ryunosuke/Dropbox/比喩関連/基盤数/SemanticSimilarityTest/code/experiment/1_PreExp_SST/Analysis")
library(tidyr)
library(dplyr)
#結果が再現できるようにseed値を固定する
set.seed(1)
#データの読み込み
raw_dat = read.csv("./edited_dat/CreateSST_PreExp_SST_20230103_1258_ClassifyAnswer_v5.xlsx")
#データの読み込み
raw_dat = read.xlsx("./edited_dat/CreateSST_PreExp_SST_20230103_1258_ClassifyAnswer_v5.xlsx")
library(openxlsx)
#データの読み込み
raw_dat = read.xlsx("./edited_dat/CreateSST_PreExp_SST_20230103_1258_ClassifyAnswer_v5.xlsx")
trial_index_lst = unique(raw_dat$trial_index)
trial_index_lst
sampled_dat = data.frame()
sampled_dat
colnames(sampled_dat) = colnames(raw_dat)
sampled_dat
colnames(raw_dat)
length(colnames(raw_dat))
sampled_dat = data.frame(
matrix(ncol = length(colnames(raw_dat)),
nrow = 0)
)
colnames(sampled_dat) = colnames(raw_dat)
sampled_dat
sub_trial_index = subset(raw_dat, raw_dat$tiral_index==trial_index)
sub_trial_index
sub_trial_index = subset(raw_dat, raw_dat$tiral_index==2)
sub_trial_index
head(raw_dat)
sub_trial_index = subset(raw_dat, raw_dat$tiral_index==2)
sub_trial_index
subset(raw_dat, raw_dat$trial_index == 2)
sub_trial_index = subset(raw_dat, raw_dat$tiral_index == 2)
head(sub_trial_index)
subset(raw_dat, raw_dat$tiral_index == 2)
subset(raw_dat, raw_dat$trial_index == 2)
sub_trial_index = subset(raw_dat, raw_dat$trial_index == 2)
head(sub_trial_index)
shape(sub_trial_index)
nrow(sub_trial_index)
sub_tiral_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
nrow(sub_trial_index_rm_duplicated)
table(sub_trial_index$SHに基づく得点)
table(sub_trial_index$SHに基づく得点)
table(sub_trial_index$SHに基づく得点)[0]
table(sub_trial_index$SHに基づく得点)[1]
table(sub_trial_index$SHに基づく得点)[2]
table(sub_trial_index$SHに基づく得点)[3]
table(sub_trial_index$SHに基づく得点)[1][1]
table(sub_trial_index$SHに基づく得点)[1][0]
table(sub_trial_index$SHに基づく得点)[1]
table(sub_trial_index$SHに基づく得点)[1][[0]]
table(sub_trial_index$SHに基づく得点)[1]
table(sub_trial_index$SHに基づく得点)[[1]]
table(sub_trial_index$SHに基づく得点)[[2]]
table(sub_trial_index$SHに基づく得点)[[3]]
table(sub_trial_index$SHに基づく得点)[[3]][1]
table(sub_trial_index$SHに基づく得点)[[3]]
_tmp_num = table(sub_trial_index$SHに基づく得点)[[3]]
tmp_num = table(sub_trial_index$SHに基づく得点)[[3]]
tmp_num
a = 3
a
tmp_num / 80
sub_trial_index = subset(raw_dat, raw_dat$trial_index == 10)
table(sub_trial_index$SHに基づく得点)
table(raw_dat$SHに基づく得点)
table(raw_dat$trial_index, raw_dat$SHに基づく得点)
sh_score_lst = unique(raw_dat$SHに基づく得点)
sh_score_lst
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == 1)
sub_sh_score
nrow(sub_sh_score)
trial_index_lst = unique(raw_dat$trial_index)
sh_score_lst = unique(raw_dat$SHに基づく得点)
sampled_dat = data.frame(
matrix(ncol = length(colnames(raw_dat)),
nrow = 0)
)
colnames(sampled_dat) = colnames(raw_dat)
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
sub_trial_index = subset(raw_dat, raw_dat$trual_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#以下の関数でSHに基づく得点が0の個数を調べると、5件を除いて8以下であったため
#0からの抽出は1点だけ
#残りは80から0を取り除いた件数で、割合で決める
#table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else if (sh_score == 2) {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_sh_score))
sh_score_two_num = nrow(sub_sampled_dat)
} else {
#0のサンプル数と、2のサンプル数を除いた件数をランダムにサンプル
sample_num_one = 8 - (1 + sh_score_one_num)
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = sample_num_one)
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
print(sh_score)
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
sub_trial_index = subset(raw_dat, raw_dat$trual_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#以下の関数でSHに基づく得点が0の個数を調べると、5件を除いて8以下であったため
#0からの抽出は1点だけ
#残りは80から0を取り除いた件数で、割合で決める
#table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else if (sh_score == 2) {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_trial_index))
sh_score_two_num = nrow(sub_sampled_dat)
} else {
#0のサンプル数と、2のサンプル数を除いた件数をランダムにサンプル
sample_num_one = 8 - (1 + sh_score_one_num)
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = sample_num_one)
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
sub_sh_score
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
sub_trial_index_rm_duplicated
sub_trial_index = subset(raw_dat, raw_dat$trual_index == trial_index)
sub_trial_index
sub_trial_index = subset(raw_dat, raw_dat$trial_index == trial_index)
sub_tiral_index
sub_trial_index
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
sub_trial_index_rm_duplicated
sh_score_lst
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == 1)
sub_sh_score
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
sub_sampled_dat
trial_index_lst = unique(raw_dat$trial_index)
sh_score_lst = unique(raw_dat$SHに基づく得点)
sampled_dat = data.frame(
matrix(ncol = length(colnames(raw_dat)),
nrow = 0)
)
colnames(sampled_dat) = colnames(raw_dat)
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
sub_trial_index = subset(raw_dat, raw_dat$trial_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#ref: table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else if (sh_score == 2) {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_trial_index))
sh_score_two_num = nrow(sub_sampled_dat)
} else {
#0のサンプル数と、2のサンプル数を除いた件数をランダムにサンプル
sample_num_one = 8 - (1 + sh_score_one_num)
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = sample_num_one)
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
sub_trial_index = subset(raw_dat, raw_dat$trial_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#ref: table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else (sh_score == 2) {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_trial_index))
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
colnames(sampled_dat) = colnames(raw_dat)
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
sub_trial_index = subset(raw_dat, raw_dat$trial_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#ref: table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else (sh_score == 2) {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_trial_index))
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
sub_trial_index = subset(raw_dat, raw_dat$trial_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#ref: table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_trial_index))
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
sampled_dat
nrow(sampled_dat)
nrow(raw_dat)
nrow(sub_sh_score)/nrow(sub_trial_index)
trial_index_lst = unique(raw_dat$trial_index)
sh_score_lst = unique(raw_dat$SHに基づく得点)
sampled_dat = data.frame(
matrix(ncol = length(colnames(raw_dat)),
nrow = 0)
)
colnames(sampled_dat) = colnames(raw_dat)
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
sub_trial_index = subset(raw_dat, raw_dat$trial_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#ref: table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_trial_index))
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
nrow(sub_sh_score)/nrow(sub_trial_index)
nrow(sampled_dat)
sub_sh_score
nrow(sub_sh_score)
sh_score
for (trial_index in trial_index_lst){
#質問のsubsetの抽出
print(trial_index)
sub_trial_index = subset(raw_dat, raw_dat$trial_index == trial_index)
#重複を取り除いたsubsetを用意
sub_trial_index_rm_duplicated = sub_trial_index[!duplicated(sub_trial_index$answer),]
#SHに基づく得点ごとの回答割合を求める
#ref: table(sub_trial_index$SHに基づく得点)
for (sh_score in sh_score_lst){
#sh_scoreのsubsetの抽出
sub_sh_score = subset(sub_trial_index_rm_duplicated, sub_trial_index_rm_duplicated$SHに基づく得点 == sh_score)
#ランダムサンプリング
if (sh_score == 0){
sub_sampled_dat = sample_n(tbl = sub_sh_score, size = 1)
} else {
#全体に占める2の割合で決定
sub_sampled_dat = sample_frac(tbl = sub_sh_score, size = nrow(sub_sh_score)/nrow(sub_trial_index))
}
sampled_dat = rbind(sampled_dat, sub_sampled_dat)
}
}
nrow(sub_sh_score)
nrow(sub_trial_index)
